
/*
 *
 * VCF parser
 *
 *
 *
 */

/*
 *
 * [[ VCF INPUT - SIMULATED ]]
 *
 * generated by tskit.write_vcf()
 *
 *
 * ** [POSITIONS]
 *
 * Positions are 0-based
 *
 *
 *
 *
 * ** [ALLELES]
 *
 *
 * * REF(=ANC)=0
 * 
 * Reference allele is the same as ancestral allele
 * Encoded as 0
 *
 * * ALT=1
 *
 * Only one ALT allele is present
 * Encoded as 1
 * 
 *
 *
 * ** Note
 * default is 1based?
 *
 */

#include <stdio.h>
#include "htslib/vcf.h"

#include <inttypes.h>
#include <math.h>

#define PI 3.141592654



double Poisson(double xm)
{
	double lgamma(double xx);
	static double sq,alxm,g,oldm=(-1.0);
	double em, t, y;

	if (xm < 12.0) {
		if (xm != oldm) {
			oldm=xm;
			g=exp(-xm);
		}
		em=-1;
		t=1.0;
		do {
			++em;
			t *=drand48();
		} while (t>g);
	} 
	else {
		if (xm!=oldm) {
			oldm=xm;
			sq=sqrt(2.0*xm);
			alxm=log(xm);
			g=xm*alxm-lgamma(xm+1.0);
		}
		do {
			do {
				y=tan(PI*drand48());
				em=sq*y+xm;
			} while (em< 0.0);
			em=floor(em);
			t=0.9*(1.0+y*y)*exp(em*alxm-lgamma(em+1.0)-g);
		} while (drand48()>t);
	}
	return em;
}



int main(int argc, char **argv) {



	int nReads;
	int mean_depth=10;



	if (argc != 2) {
		return 1;
	}




	htsFile * inFile = bcf_open(argv[1], "r");

	if (inFile == NULL) {
		return 1;
	}



	bcf1_t *bcf = bcf_init();




	if (bcf == NULL) {
		return 1; 
	}

	bcf_hdr_t *hdr = bcf_hdr_read(inFile);


	bcf_idpair_t *contig;

	int nSites=0; 
	int nInvar=0;
	int nVar=0;  



	int isSim=0; 
	int shift_coord_system=0;


	isSim=1;

	if(isSim){
		shift_coord_system=1;
	}

	int nSamples=bcf_hdr_nsamples(hdr);




	fprintf(stderr, "\nFILE READING...\n\n");
	fprintf(stderr, "Reading file \"%s\"\n", argv[1]);
	fprintf(stderr, "Number of samples: %i\n", bcf_hdr_nsamples(hdr));
	fprintf(stderr,	"Number of chromosomes: %d\n",hdr->n[BCF_DT_CTG]);

	fprintf(stderr, "\n\n\n");

	while (bcf_read(inFile, hdr, bcf) == 0) {

		bcf_fmt_t *gt = bcf_get_fmt(hdr, bcf, "GT");


		nSites++;
		if (bcf_is_snp(bcf)) {
			nVar++;


			fprintf(stderr,"Number of alleles: %lu\n", (unsigned long)bcf->n_allele);
			fprintf(stderr,"CHR: %s\n", bcf_hdr_id2name(hdr, bcf->rid));
			fprintf(stderr,"POS: %li\n", bcf->pos+shift_coord_system);
			fprintf(stderr,"REF: %s\nALT: %s\n", bcf->d.allele[0], bcf->d.allele[1]);

			fprintf(stderr,"REF: %s\nALT: %s\n", bcf->d.allele[0], bcf->d.allele[1]);

			for (int i=0; i<bcf->n_allele; ++i){
				fprintf(stderr,"%s\n", bcf->d.allele[i]);
			}

		}else{
			nInvar++;

		}
	}




	fprintf(stderr, "\nCONTIG INFO\n\n");
	contig = hdr->id[BCF_DT_CTG]; 


	for (int i = 0; i < hdr->n[BCF_DT_CTG]; ++i){
		fprintf(stderr,"Contig ID:\t%s\nContig length:\t%lu\n", contig[i].key, contig[i].val->info[0]);
	}

	fprintf(stderr, "\n---\n\n");


	fprintf(stderr, "Number of variable sites: %i\n", nVar);
	fprintf(stderr, "Number of invariable sites: %i\n", nInvar);
	fprintf(stderr, "Total number of sites: %i\n", nSites);




	for (int ii=0; ii<bcf_hdr_nsamples(hdr);ii++){

		nReads=Poisson(mean_depth);

	}



	bcf_hdr_destroy(hdr);
	bcf_close(inFile);
	bcf_destroy(bcf);

	return 0;
}

